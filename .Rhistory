library(ggplot2)
d <- diamonds
head(d)
tail(d)
# Contagem linhas
nrow(d)
# Contagem colunas
ncol(d)
mean(d$price)
median(d$price)
# sumario
summary(d)
d[,7]
mean(d[,7])
hist(d$price)
# sumario
summary(d)
sd(d$price)
# sumario
summary(d)
a1 <- d[1:3000,]
# media
mean(a1)
# media
mean(a1$price)
# mediana
median(a1$price)
sd(a1$price)
summary(c(d,a1))
sample(d)
# Geração de amostra aleatória
set.seed(32)
sample(d)
sample(d)
sample(d)
sample(d)
mean(sample(d$price))
mean(sample(d$price))
# Geração de amostra aleatória
set.seed(31)
mean(sample(d$price))
mean(sample(d$price))
# Geração de amostra aleatória
set.seed(30)
mean(sample(d$price))
# Geração de amostra aleatória
set.seed(3)
mean(sample(d$price))
# Geração de amostra aleatória
set.seed(33)
mean(sample(d$price))
# Geração de amostra aleatória
set.seed(100)
mean(sample(d$price))
mean(3)
mean(3)
# Geração de amostra aleatória
set.seed(33)
sample(3)
# Geração de amostra aleatória
set.seed(100)
sample(3)
va <- sample(53940)
a3 <- d[va[1:3000],]
mean(a3$price)
median(a3$price)
sd(a3$price)
sample(100)
sample(d$price)
hist(d$price)
hist(a3$price)
hist(a3$price)
hist(a1$price)
hist(a2$price)
hist(a3$price)
hist(a1$price)
ggplot(d, aes(price)) +
geom_histogram()
ggplot(d, aes(price)) +
geom_histogram() +
geom_histogram(aes(a3$price))
ggplot(d, aes(price)) +
geom_histogram()
ggplot(d, aes(price)) +
geom_histogram(bins = 10)
ggplot(d, aes(price)) +
geom_histogram(bins = 1000)
ggplot(d, aes(price)) +
geom_histogram(bins = 100)
ggplot(d, aes(price)) +
geom_histogram(bins = 50)
hist(a3$price)
ggplot(d, aes(price)) +
geom_histogram(bins = 50)
boxplot(d$price ~ d$color)
return(abs(scorez)>3)
fctOutlier <- function(x){
scorez <- (x-mean(x))/sd(x)
return(abs(scorez)>3)
}
fctOutlier(d$price)
fctOutlier(d$price) %>% View()
library(tidyverse)
fctOutlier(d$price) %>% View()
d$outlier <- fctOutlier(d$price)
View(d)
(d$price-mean(d$price))/sd(d$price)
(d$price-mean(d$price))/sd(d$price) %>% view()
(d$price-mean(d$price))/sd(d$price) %>% view()
(d$price-mean(d$price))/sd(d$price) %>% View()
(d$price-mean(d$price))/sd(d$price)
d$outlier <- (d$price-mean(d$price))/sd(d$price)
View(d)
d$outlier <- fctOutlier(d$price)
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, color = "blue")
boxplot(ppm, col = "blue")
getwd()
pib <- read.csv("https://raw.githubusercontent.com/diogenesjusto/FIAP/master/SHIFT/Data/pib.csv")
head(pib)
treino <- pib[132,]
teste <- pib[133:145,]
teste <- pib[133:144,]
View(teste)
teste <- pib[133:138,]
View(teste)
mod <- lm(PIB ~ BRL, data = treino)
summary(mod)
View(treino)
treino <- pib[1:132,]
mod <- lm(PIB ~ BRL, data = treino)
summary(mod)
p <- predict(mod, newdata = teste)
p
View(teste)
cbind(p, teste$PIB, p-teste$PIB)
sse=sum((p-teste$PIB)^2)
sse
rmse=sqrt(mean((p-teste$PIB)^2))
rmse
modm <- lm(PIB ~ BRL + BRP, data= treino)
summary(modm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
train <- read_csv("titanic/train.csv")
View(train)
test <- read_csv("titanic/test.csv")
gender <- read_csv("titanic/gender_submission.csv")
# Execução do modelo
m1<-lm(Survived~Embarked, data=train)
# Previsão dos dados
p<-predict(m1, newdata=test)
pr <- ifelse(p<0.5, 0, 1)
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, pr)
pr_data <- as.data.frame(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
# Gravação em disco do arquivo a ser submetido no site Kaggle
write.csv(pr_data, file="predict.csv", row.names = FALSE)
p
# Montagem do dataframe para saída de dados
pr_data <- cbind(test$PassengerId, pr)
pr_data <- as.data.frame(pr_data)
pr_data
View(pr_data)
# Nomes das colunas
names(pr_data) <- c("PassengerId", "Survived")
View(train)
View(test)
View(gender)
head(train)
View(train)
glimpse(train)
lapply(train, function(x) length(unique(x)))
summary(train)
lapply(train, function(x) length(unique(x)))
missing_values <- train %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values
missing_values
missing_values <- pivot_longer(missing_values, key="feature", value="missing_pct")
gather
gather
gather
missing_values %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
missing_values <- train %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key="feature", value="missing_pct")
missing_values %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
missing_values
levels(train$Embarked)
levels(glimpse(train$Embarked))
levels(glimpse(train$Embarked))
levels(glimpse(train$Embarked))
str_match(train$Name, '(.*), ([a-zA-Z]{1,})[A-Z]{1}')
str_match(train$Name, '(.*),')
str_match(train$Name[10], '(.*),')
str_match(train$Name[20], '(.*),')
str_match(train$Name[10], '(.*), ([a-zA-Z]{1,})[A-Z]{1}')
str_match(train$Name[10], '(.*), ([a-zA-Z])')
str_match(train$Name[10], '.*, ([a-zA-Z])')
)
str_match(train$Name[10], '(.*), ([a-zA-Z])')
str_match(train$Name[10], '[(.*)], ([a-zA-Z])')
str_match(train$Name[10], '(.*), ([a-zA-Z])')
str_match(train$Name[10], '[:alpha:], ([a-zA-Z])')
str_match(train$Name[10], '[:alpha:]+, ([a-zA-Z])')
str_match(train$Name[10], '[:alpha:], ([a-zA-Z])')
str_match(train$Name[10], '[:alpha:], ([a-zA-Z]{1,})')
str_match(train$Name[10], '[:alpha:] ([a-zA-Z]{1,})')
str_match(train$Name, '[:alpha:], ([a-zA-Z]{1,})')
titulo <- str_match(train$Name, '[:alpha:], ([a-zA-Z]{1,})')
View(titulo)
View(titulo)
train$titulo <- titulo$V2
train$titulo <- titulo[,2]
titulo <- str_match(train$Name, '([a-zA-Z]{1,})')
str_match(train$Name, '([a-zA-Z]{1,})')
str_match(train$Name, '([a-zA-Z]{1,})')
o <- titulo[,2]
train <-
ain %>%
mutate(Embarked = as.factor(Embarked), Sex = as.factor(Sex))
train <- train %>%
mutate(Embarked = as.factor(Embarked), Sex = as.factor(Sex), titulo = as.factor(titulo))
levels(glimpse(train$Embarked))
levels(glimpse(train$titulo))
levels(glimpse(train))
levels(glimpse(train))
train_dummies <- fastDummies::dummy_columns(.data = train,
select_columns = c("Embarked", "Sex", "titulo"),
remove_selected_columns = TRUE,
remove_most_frequent_dummy = TRUE)
View(train_dummies)
modelo_train <- lm(Survived ~ ., - c(Name, Ticket, Cabin))
modelo_train <- lm(Survived ~ ., - c("Name", "Ticket", "Cabin"))
modelo_train <- lm(Survived ~ ., - Name)
modelo_train <- lm(Survived ~ ., - c(Name, Ticket, Cabin), train_dummies)
modelo_train <- lm(Survived ~ ., - Name, train_dummies)
modelo_train <- lm(Survived ~ . - Name, train_dummies)
modelo_train <- lm(Survived ~ . - c(Name, Ticket, Cabin), train_dummies)
modelo_train <- lm(Survived ~ . - Name - Ticket - Cabin, train_dummies)
summary(modelo_train)
modelo_train <- lm(Survived ~ . - Name - Ticket - Cabin - PassagerId, train_dummies)
modelo_train <- lm(Survived ~ . - Name - Ticket - Cabin - PassegerId, train_dummies)
modelo_train <- lm(Survived ~ . - Name - Ticket - Cabin - PassengerId, train_dummies)
summary(modelo_train)
cor(train_dummies)
cor(train_dummies[,-c("Name", "Ticket")])
cor(train_dummies[,-[1]])
cor(train_dummies[,-1])
cor(train_dummies[,-1:5])
cor(train_dummies[,-(1:5)])
summary(modelo_train)
train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId))
train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor(na.rm = TRUE)
train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
summary(train)
train <- train %>%
mutate(Age = ifelse(Age = NA, median(Age), Age))
train <- train %>%
mutate(Age = ifelse(Age == NA, median(Age), Age))
summary(train)
train <- read_csv("titanic/train.csv")
test <- read_csv("titanic/test.csv")
train <- train %>%
mutate(Age = ifelse(is.na(Age), median(Age), Age))
summary(train)
is.na(Age)
train <- train %>%
mutate(Age = ifelse(is.na(Age), median(Age), Age))
train <- train %>%
mutate(Age = if_else(is.na(Age), median(Age), Age))
train <- train %>%
mutate(Age = if_else(is.na(Age), median(Age)))
train <- train %>%
mutate(Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age))
titulo <- str_match(train$Name, '[:alpha:], ([a-zA-Z]{1,})')
train$titulo <- titulo[,2]
## Transformando variaveis em factors
train <- train %>%
mutate(Embarked = as.factor(Embarked), Sex = as.factor(Sex), titulo = as.factor(titulo))
## Criando tabela com Dummies
train_dummies <- fastDummies::dummy_columns(.data = train,
select_columns = c("Embarked", "Sex", "titulo"),
remove_selected_columns = TRUE,
remove_most_frequent_dummy = TRUE)
train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
cor <- train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
corrplot::corrplot(cor)
summary(train_dummies)
levels(train$Embarked)
## Criando tabela com Dummies
train_dummies <- fastDummies::dummy_columns(.data = train,
select_columns = c("Embarked", "Sex", "titulo"),
remove_selected_columns = TRUE,
remove_most_frequent_dummy = FALSE)
summary(train_dummies)
summary(train_dummies)
cor <- train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
corrplot::corrplot(cor)
train <- train %>%
mutate(Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age), Embarked = if_else(is.na(Embarked), "S", Embarked))
train <- train %>%
mutate(Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age), Embarked = if_else(is.na(Embarked), S, Embarked))
train <- train %>%
mutate(Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age), Embarked = if_else(is.na(Embarked), as.factor("S"), Embarked))
train <- train %>%
mutate(
Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age),
Embarked = if_else(is.na(Embarked), as.factor("S"), Embarked)
)
titulo <- str_match(train$Name, '[:alpha:], ([a-zA-Z]{1,})')
train$titulo <- titulo[,2]
## Transformando variaveis em factors
train <- train %>%
mutate(Embarked = as.factor(Embarked), Sex = as.factor(Sex), titulo = as.factor(titulo))
## Criando tabela com Dummies
train_dummies <- fastDummies::dummy_columns(.data = train,
select_columns = c("Embarked", "Sex", "titulo"),
remove_selected_columns = TRUE,
remove_most_frequent_dummy = FALSE)
summary(train_dummies)
summary(train_dummies)
cor <- train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
corrplot::corrplot(cor)
train <- read_csv("titanic/train.csv")
train <- train %>%
mutate(
Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age),
Embarked = if_else(is.na(Embarked), as.factor("S"), Embarked)
)
train <- train %>%
mutate(
Age = if_else(is.na(Age), median(Age, na.rm = TRUE), Age),
Embarked = if_else(is.na(Embarked), "S", Embarked)
)
titulo <- str_match(train$Name, '[:alpha:], ([a-zA-Z]{1,})')
train$titulo <- titulo[,2]
## Transformando variaveis em factors
train <- train %>%
mutate(Embarked = as.factor(Embarked), Sex = as.factor(Sex), titulo = as.factor(titulo))
## Criando tabela com Dummies
train_dummies <- fastDummies::dummy_columns(.data = train,
select_columns = c("Embarked", "Sex", "titulo"),
remove_selected_columns = TRUE,
remove_most_frequent_dummy = FALSE)
cor <- train_dummies %>%
select(-c(Name,Ticket,Cabin,PassengerId)) %>%
cor()
corrplot::corrplot(cor)
corrplot::corrplot(cor, type = "upper")
modelo_train <- lm(Survived ~ . - Name - Ticket - Cabin - PassengerId, train_dummies)
summary(modelo_train)
titulo <-  gsub("^.*, (.*?)\\..*$", "\\1", train$names)
train$titulo <- titulo
titulo <-  gsub("^.*, (.*?)\\..*$", "\\1", train$names)
titulo <-  gsub("^.*, (.*?)\\..*$", "\\1", train$Name)
train$titulo <- titulo
str_match(train$Name, pattern = "^.*, (.*?)\\..*$", "\\1")
train$Name
str_match(train$Name, pattern = "^.*,")
str_match(train$Name[10,], pattern = "^.*, (.*?)\\..*$", "\\1")
str_match(train$Name[10,], pattern = "^.*,")
str_match(train$Name[10], pattern = "^.*,")
str_match(train$Name[10], pattern = "^.*, (.*?)")
str_match(train$Name[10], pattern = "^.*, .*?\\..*$", "\\1")
str_match(train$Name[10], pattern = "^.*, .*?")
str_match(train$Name[10], pattern = "^.*, ")
titulo <-  gsub("^.*, (.*?)\\..*$", "\\1", train$Name)
titulo
str_match(train$Name[10], pattern = "^.* .*?")
str_match(train$Name[10], pattern = "(^.*) .*?")
str_match(train$Name[10], pattern = "^.*, .*?")
